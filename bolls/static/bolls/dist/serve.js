//__HEAD__
var ee=Object.create,T=Object.defineProperty,te=Object.getPrototypeOf,re=Object.prototype.hasOwnProperty,se=Object.getOwnPropertyNames,ne=Object.getOwnPropertyDescriptor;var ie=r=>T(r,"__esModule",{value:!0});var oe=(r,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of se(t))!re.call(r,s)&&s!=="default"&&T(r,s,{get:()=>t[s],enumerable:!(e=ne(t,s))||e.enumerable});return r},a=r=>oe(ie(T(r!=null?ee(te(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var ae=a(require("events")),le=a(require("fs")),ue=a(require("path"));var Te=Symbol.for("#refresh"),he=Symbol.for("#manifest"),$e=Symbol.for("#absPath"),je=Symbol.for("#raw"),Be=Symbol.for("#watch");var R=class{static for(t){return new Proxy({},new this(t))}constructor(t){this.getter=t}get target(){return this.getter()}get(t,e){return this.target[e]}set(t,e,s){return this.target[e]=s,!0}},l=R.for(function(){return globalThis[he]});var j=a(require("cluster")),b=a(require("fs")),B=a(require("path")),I=a(require("events"));var $=a(require("perf_hooks")),g=Symbol.for("#spinner"),fe=Symbol.for("#ctime"),M=Symbol.for("#IMBA_OPTIONS"),ce={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},h={bold:function(r){return"[1m"+r+"[22m"},red:function(r){return"[31m"+r+"[39m"},green:function(r){return"[32m"+r+"[39m"},yellow:function(r){return"[33m"+r+"[39m"},blue:function(r){return"[94m"+r+"[39m"},gray:function(r){return"[90m"+r+"[39m"},white:function(r){return"[37m"+r+"[39m"},f:function(r,t){let e=ce[r];return"["+e[0]+"m"+t+"["+e[1]+"m"}};h.warn=h.yellow;h.error=h.red;var w=process.platform!=="win32"||process.env.CI||process.env.TERM==="xterm-256color",pe={info:h.f("yellowBright",w?"\u2139":"i"),success:h.green(w?"\u2714":"\u221A"),warning:h.yellow(w?"\u26A0":"!!"),error:h.red(w?"\xD7":"\u2716"),debug:h.blue(w?"\u2139":"i")},P=["debug","info","success","warning","error","silent"],de={"-1":"socket","4":"ip4","6":"ip6"};function me(r){let t=h.f;return r=r.replace(/https?\:[^\s\n\)\]]+/g,function(e){return t("blueBright",e)}),r=r.replace(/^[\t\s]*\>[^\n]+/gm,function(e){return t("bold",e)}),r=r.replace(/\t/g,"  "),r=r.replace(/^/gm,"  "),r}function C(r,...t){let e=h.f;return r=r.replace(/\%([\w\.]+)/g,function(s,i){let n=t.shift();if(i=="markdown")return me(n);if(i=="kb")return e("dim",(n/1e3).toFixed(1)+"kb");if(i=="path"||i=="bold")return e("bold",n);if(i=="dim")return e("dim",n);if(i=="address"){let o=de[n.addressType];return n.port?e("blueBright",[n.address||"http://127.0.0.1",n.port].join(":")):e("blueBright",o)}else{if(i=="ms")return e("yellow",Math.round(n)+"ms");if(i=="d")return e("blueBright",n);if(i=="red")return e("redBright",n);if(i=="green")return e("greenBright",n);if(i=="yellow")return e("yellowBright",n);if(i=="ref")return e("yellowBright","#"+(n.id||n));if(i=="elapsed"){n!=null&&t.unshift(n);let o=$.performance.now();return e("yellow",Math.round(o)+"ms")}else if(i=="heap"){n!=null&&t.unshift(n);let o=process.memoryUsage().heapUsed/1024/1024;return e("yellow",o.toFixed(2)+"mb")}else return n}}),[r,...t]}var H=null,A=null,F=class{static get main(){return A||(A=new this)}constructor({prefix:t=null,loglevel:e}={}){this[fe]=Date.now(),this.prefix=t?C(...t)[0]:"",this.loglevel=e||process.env.IMBA_LOGLEVEL||globalThis[M]&&globalThis[M].loglevel||"info"}write(t,...e){if(P.indexOf(t)<P.indexOf(this.loglevel))return this;let s=pe[t]||t,[i,...n]=C(...e);return this.prefix&&(i=this.prefix+i),this[g]&&this[g].isSpinning?(t=="success"&&(this[g].clear(),console.log(s+" "+i,...n),this[g].frame()),this[g].text=i):console.log(s+" "+i,...n)}debug(...t){return this.write("debug",...t)}log(...t){return this.write("info",...t)}info(...t){return this.write("info",...t)}warn(...t){return this.write("warn",...t)}error(...t){return this.write("error",...t)}success(...t){return this.write("success",...t)}ts(...t){return this.write("debug",...t,$.performance.now())}spinner(){}get[g](){return H}get proxy(){var t=this;let e=function(...s){return t.info(...s)};return e.info=this.info.bind(this),e.warn=this.warn.bind(this),e.error=this.error.bind(this),e.debug=this.debug.bind(this),e.success=this.success.bind(this),e.ts=this.ts.bind(this),e.logger=this,e}async time(t,e){let s=Date.now();if(e){let i=await e();return this.info(""+t+" %ms",Date.now()-s),i}}},O=new F().proxy;var ge=a(require("module")),E=a(require("http")),He=a(require("https")),k=a(require("http2"));function f(r){let t;return r?(t=r.toIterable)?t.call(r):r:[]}var L=Symbol.for("#setup"),D=Symbol.for("#setup?"),z=Symbol.for("#watch"),be=Symbol.for("#dom"),ye=Symbol.for("#server"),ve=Symbol.for("#raw"),we={svg:"image/svg+xml",html:"text/html",jpg:"image/jpeg",jpeg:"image/jpeg",js:"text/javascript",mjs:"text/javascript",json:"application/json",otf:"font/otf",ttf:"font/ttf",woff:"font/woff",woff2:"font/woff2",png:"image/png",css:"text/css",avif:"image/avif"},N={svg:{"Content-Type":"image/svg+xml"},html:{"Content-Type":"text/html"},jpg:{"Content-Type":"image/jpeg"},jpeg:{"Content-Type":"image/jpeg"},js:{"Content-Type":"text/javascript"},mjs:{"Content-Type":"text/javascript"},json:{"Content-Type":"application/json"},otf:{"Content-Type":"font/otf"},ttf:{"Content-Type":"font/ttf"},woff:{"Content-Type":"font/woff"},woff2:{"Content-Type":"font/woff2"},png:{"Content-Type":"image/png"},css:{"Content-Type":"text/css"},avif:{"Content-Type":"image/avif"}},c=globalThis.process,V=class extends Set{call(t,...e){var s;s=[];for(let i of f(this))s.push(i[t](...e));return s}close(t={}){var e;e=[];for(let s of f(this))e.push(s.close(t));return e}reload(t={}){var e;e=[];for(let s of f(this))e.push(s.reload(t));return e}broadcast(t,...e){var s;s=[];for(let i of f(this))s.push(i.broadcast(t,...e));return s}emit(t,e){var s;s=[];for(let i of f(this))s.push(i.emit(t,e));return s}},y=new V,W=new class extends I.EventEmitter{constructor(){var t;super(...arguments);t=this,this.autoreload=!1,this.state={},j.default.isWorker&&c.on("message",function(e){if(t.emit("message",e),e[0]=="emit")return t.emit(...e.slice(1))})}[L](){var t=this;if(!!(this[D]!=!0?(this[D]=!0,!0):!1))return this.on("reloading",function(e){var s;console.log("is reloading - from outside"),t.state.reloading=!0,s=[];for(let i of f(y))s.push(i.pause());return s}),this.on("reloaded",async function(e){var s;t.state.reloaded=!0,console.log("is reloaded - from outside"),s=[];for(let n of f(y))s.push(n.close());let i=s;return await Promise.all(i),c.exit(0)}),this.on("manifest:change",function(e){if(c.env.IMBA_HMR)return l.update(e)}),this.on("manifest:error",function(e){return console.log("error from manifest!",e),l.errors=e,y.broadcast("errors",l.errors)}),!0}send(t){if(c.send instanceof Function)return c.send(t)}on(t,e){return t=="change"&&this.watch(),super.on(...arguments)}watch(){var t=this;if(this[z]!=!0?(this[z]=!0,!0):!1)return l.on("change:main",function(){return t.emit("change",l)})}reload(){if(!(this.isReloading!=!0?(this.isReloading=!0,!0):!1))return this;if(this.state.reloading=!0,!c.env.IMBA_SERVE){console.warn("not possible to gracefully reload servers not started via imba start");return}this.send("reload")}},U=class{constructor(t,e={}){this.url=t,[this.path,this.query]=t.split("?"),this.ext=B.default.extname(this.path),this.mimeType=we[this.ext.slice(1)]||"text/plain",this.headers={"Access-Control-Allow-Origin":"*","cache-control":"public"},Object.assign(this.headers,N[this.ext.slice(1)]||{})}respond(t,e){let s=l.urls[this.url],i=this.headers,n=s?l.resolve(s):l.resolveAssetPath("public"+this.path);return n?(s&&s.ttl>0&&(i["cache-control"]="max-age="+s.ttl),b.default.access(n,b.default.constants.R_OK,function(o){if(o)return console.log("could not find path",n),e.writeHead(404,{}),e.end();try{let u=b.default.createReadStream(n);return e.writeHead(200,i),u.pipe(e)}catch(u){return e.writeHead(503,{}),e.end()}})):(console.log("found no path for",s,this.url),e.writeHead(404,{}),e.end())}createReadStream(){return b.default.createReadStream(this.path)}pipe(t){return this.createReadStream().pipe(t)}},G=class{static wrap(t){return new this(t)}constructor(t){var e=this;y.add(this),this.id=Math.random(),this.closed=!1,this.paused=!1,this.server=t,this.clients=new Set,this.stalledResponses=[],this.assetResponders={},c.env.IMBA_PATH&&(this.devtoolsPath=B.default.resolve(c.env.IMBA_PATH,"devtools.imba.web.js")),this.scheme=t instanceof E.default.Server?"http":"https";let s=this.server._events.request,i=globalThis[be];t.off("request",s),s[ye]=this,t.on("listening",function(){let n=e.server.address(),o=n.address;(o=="::"||o=="0.0.0.0")&&(o="localhost");let u=""+e.scheme+"://"+o+":"+n.port+"/";return O.info("listening on %bold",u)}),l.on("change",function(n,o){return e.broadcast("manifest",o.data[ve])}),this.handler=function(n,o){var u;let d=n instanceof k.Http2ServerRequest,m=n.url,Z="/__assets__/";if(e.paused||e.closed)return o.statusCode=302,o.setHeader("Location",n.url),d||o.setHeader("Connection","close"),e.closed?(d&&n.stream.session.close(),o.end()):e.stalledResponses.push(o);if(m=="/__hmr__.js"&&e.devtoolsPath){let p=b.default.createReadStream(e.devtoolsPath);return o.writeHead(200,N.js),p.pipe(o)}if(m=="/__hmr__"){let p={"Content-Type":"text/event-stream","Cache-Control":"no-cache"};return d||(p.Connection="keep-alive"),o.writeHead(200,p),e.clients.add(o),e.broadcast("init",l.serializeForBrowser(),[o]),n.on("close",function(){return e.clients.delete(o)}),!0}if(m.indexOf(Z)==0)return((u=e.assetResponders)[m]||(u[m]=new U(m,e))).respond(n,o);let S=n.headers,_;if(d?_=S[":scheme"]+"://"+S[":authority"]:_=(n.connection.encrypted?"https":"http")+"://"+S.host,i){let p=new i.Location(n.url,_);return i.Document.create({location:p},function(){return s(n,o)})}else return s(n,o)},t.on("request",this.handler),t.on("close",function(){return console.log("server is closing!!!")}),j.default.isWorker&&(W[L](),W.send("serve"))}broadcast(t,e={},s=this.clients){e=JSON.stringify(e);let i="data: "+e+`


`;for(let n of f(s))n.write("event: "+t+`
`),n.write(`id: imba
`),n.write(i);return this}pause(){return(this.paused!=!0?(this.paused=!0,!0):!1)&&this.broadcast("paused"),this}resume(){if(this.paused!=!1?(this.paused=!1,!0):!1)return this.broadcast("resumed"),this.flushStalledResponses()}flushStalledResponses(){for(let t=0,e=f(this.stalledResponses),s=e.length;t<s;t++)e[t].end();return this.stalledResponses=[]}close(){var t=this;return this.pause(),new Promise(function(e){return t.closed=!0,t.server.close(e),t.flushStalledResponses()})}};function J(r,...t){return G.wrap(r,...t)}var K=Symbol.for("#init"),v=Symbol.for("#asset"),x=class{static wrap(t){let e=new x(t);return new Proxy(e,e)}constructor(t){this.meta=t}get input(){return l.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input.asset}set(t,e,s){return!0}get(t,e){return this.meta.meta&&this.meta.meta[e]!=null?this.meta.meta[e]:e=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[e]}},q=class{constructor(t=null){this[K](t)}[K](t=null){this.url=t?t.url:void 0,this.meta=t?t.meta:void 0}adoptNode(t){var e;if((e=this.meta)==null?void 0:e.content){for(let s=this.meta.attributes,i=0,n=Object.keys(s),o=n.length,u,d;i<o;i++)u=n[i],d=s[u],t.setAttribute(u,d);t.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function Q(r){var t,e;if(r[v])return r[v];if(r.type=="svg")return r[v]||(r[v]=new q(r));if(r.input){let s=globalThis._MF_&&globalThis._MF_[r.input];return s&&(Object.assign(r,s),r.toString=function(){return this.absPath}),r[v]||(r[v]=x.wrap(r))}return r}var Y=a(require("http"));var X=Q({input:"entry:app/index.html"});var xe=Y.default.createServer(function(r,t){let e=X.body;return(process.env.IMBA_HMR||globalThis.IMBA_HMR)&&(e="<script src='/__hmr__.js'></script>"+e),t.end(e)});J(xe.listen(process.env.PORT||3e3));
//__FOOT__
//# sourceMappingURL=data:application/json;base64,
