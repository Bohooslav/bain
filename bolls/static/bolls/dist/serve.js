//__HEAD__
var ee=Object.create,T=Object.defineProperty,te=Object.getPrototypeOf,re=Object.prototype.hasOwnProperty,se=Object.getOwnPropertyNames,ne=Object.getOwnPropertyDescriptor;var ie=r=>T(r,"__esModule",{value:!0});var oe=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of se(e))!re.call(r,s)&&s!=="default"&&T(r,s,{get:()=>e[s],enumerable:!(t=ne(e,s))||t.enumerable});return r},a=r=>oe(ie(T(r!=null?ee(te(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var ae=a(require("events")),le=a(require("fs")),ue=a(require("path"));var _e=Symbol.for("#refresh"),he=Symbol.for("#manifest"),Te=Symbol.for("#absPath"),$e=Symbol.for("#raw"),Be=Symbol.for("#watch");var R=class{static for(e){return new Proxy({},new this(e))}constructor(e){this.getter=e}get target(){return this.getter()}get(e,t){return this.target[t]}set(e,t,s){return this.target[t]=s,!0}},l=R.for(function(){return globalThis[he]});var B=a(require("cluster")),b=a(require("fs")),M=a(require("path")),O=a(require("events"));var $=a(require("perf_hooks")),g=Symbol.for("#spinner"),ce=Symbol.for("#ctime"),C=Symbol.for("#IMBA_OPTIONS"),fe={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},h={bold:function(r){return"[1m"+r+"[22m"},red:function(r){return"[31m"+r+"[39m"},green:function(r){return"[32m"+r+"[39m"},yellow:function(r){return"[33m"+r+"[39m"},blue:function(r){return"[94m"+r+"[39m"},gray:function(r){return"[90m"+r+"[39m"},white:function(r){return"[37m"+r+"[39m"},f:function(r,e){let t=fe[r];return"["+t[0]+"m"+e+"["+t[1]+"m"}};h.warn=h.yellow;h.error=h.red;var w=process.platform!=="win32"||process.env.CI||process.env.TERM==="xterm-256color",pe={info:h.f("yellowBright",w?"\u2139":"i"),success:h.green(w?"\u2714":"\u221A"),warning:h.yellow(w?"\u26A0":"!!"),error:h.red(w?"\xD7":"\u2716"),debug:h.blue(w?"\u2139":"i")},P=["debug","info","success","warning","error","silent"],de={"-1":"socket","4":"ip4","6":"ip6"};function me(r){let e=h.f;return r=r.replace(/https?\:[^\s\n\)\]]+/g,function(t){return e("blueBright",t)}),r=r.replace(/^[\t\s]*\>[^\n]+/gm,function(t){return e("bold",t)}),r=r.replace(/\t/g,"  "),r=r.replace(/^/gm,"  "),r}function H(r,...e){let t=h.f;return r=r.replace(/\%([\w\.]+)/g,function(s,i){let n=e.shift();if(i=="markdown")return me(n);if(i=="kb")return t("dim",(n/1e3).toFixed(1)+"kb");if(i=="path"||i=="bold")return t("bold",n);if(i=="dim")return t("dim",n);if(i=="address"){let o=de[n.addressType];return n.port?t("blueBright",[n.address||"http://127.0.0.1",n.port].join(":")):t("blueBright",o)}else{if(i=="ms")return t("yellow",Math.round(n)+"ms");if(i=="d")return t("blueBright",n);if(i=="red")return t("redBright",n);if(i=="green")return t("greenBright",n);if(i=="yellow")return t("yellowBright",n);if(i=="ref")return t("yellowBright","#"+(n.id||n));if(i=="elapsed"){n!=null&&e.unshift(n);let o=$.performance.now();return t("yellow",Math.round(o)+"ms")}else if(i=="heap"){n!=null&&e.unshift(n);let o=process.memoryUsage().heapUsed/1024/1024;return t("yellow",o.toFixed(2)+"mb")}else return n}}),[r,...e]}var j=null,A=null,F=class{static get main(){return A||(A=new this)}constructor({prefix:e=null,loglevel:t}={}){this[ce]=Date.now(),this.prefix=e?H(...e)[0]:"",this.loglevel=t||process.env.IMBA_LOGLEVEL||globalThis[C]&&globalThis[C].loglevel||"info"}write(e,...t){if(P.indexOf(e)<P.indexOf(this.loglevel))return this;let s=pe[e]||e,[i,...n]=H(...t);return this.prefix&&(i=this.prefix+i),this[g]&&this[g].isSpinning?(e=="success"&&(this[g].clear(),console.log(s+" "+i,...n),this[g].frame()),this[g].text=i):console.log(s+" "+i,...n)}debug(...e){return this.write("debug",...e)}log(...e){return this.write("info",...e)}info(...e){return this.write("info",...e)}warn(...e){return this.write("warn",...e)}error(...e){return this.write("error",...e)}success(...e){return this.write("success",...e)}ts(...e){return this.write("debug",...e,$.performance.now())}spinner(){}get[g](){return j}get proxy(){var e=this;let t=function(...s){return e.info(...s)};return t.info=this.info.bind(this),t.warn=this.warn.bind(this),t.error=this.error.bind(this),t.debug=this.debug.bind(this),t.success=this.success.bind(this),t.ts=this.ts.bind(this),t.logger=this,t}async time(e,t){let s=Date.now();if(t){let i=await t();return this.info(""+e+" %ms",Date.now()-s),i}}},I=new F().proxy;var ge=a(require("module")),E=a(require("http")),He=a(require("https")),k=a(require("http2"));function c(r){let e;return r?(e=r.toIterable)?e.call(r):r:[]}var L=Symbol.for("#setup"),D=Symbol.for("#setup?"),z=Symbol.for("#watch"),be=Symbol.for("#dom"),ye=Symbol.for("#server"),ve=Symbol.for("#raw"),N={html:{"Content-Type":"text/html"},js:{"Content-Type":"text/javascript"},mjs:{"Content-Type":"text/javascript"},json:{"Content-Type":"application/json"},css:{"Content-Type":"text/css"},otf:{"Content-Type":"font/otf"},ttf:{"Content-Type":"font/ttf"},woff:{"Content-Type":"font/woff"},woff2:{"Content-Type":"font/woff2"},svg:{"Content-Type":"image/svg+xml"},avif:{"Content-Type":"image/avif"},gif:{"Content-Type":"image/gif"},png:{"Content-Type":"image/png"},apng:{"Content-Type":"image/apng"},webp:{"Content-Type":"image/webp"},jpg:{"Content-Type":"image/jpeg"},jpeg:{"Content-Type":"image/jpeg"}},f=globalThis.process,V=class extends Set{call(e,...t){var s;s=[];for(let i of c(this))s.push(i[e](...t));return s}close(e={}){var t;t=[];for(let s of c(this))t.push(s.close(e));return t}reload(e={}){var t;t=[];for(let s of c(this))t.push(s.reload(e));return t}broadcast(e,...t){var s;s=[];for(let i of c(this))s.push(i.broadcast(e,...t));return s}emit(e,t){var s;s=[];for(let i of c(this))s.push(i.emit(e,t));return s}},y=new V,W=new class extends O.EventEmitter{constructor(){var e;super(...arguments);e=this,this.autoreload=!1,this.state={},B.default.isWorker&&f.on("message",function(t){if(e.emit("message",t),t[0]=="emit")return e.emit(...t.slice(1))})}[L](){var e=this;if(!!(this[D]!=!0?(this[D]=!0,!0):!1))return this.on("reloading",function(t){var s;console.log("is reloading - from outside"),e.state.reloading=!0,s=[];for(let i of c(y))s.push(i.pause());return s}),this.on("reloaded",async function(t){var s;e.state.reloaded=!0,console.log("is reloaded - from outside"),s=[];for(let n of c(y))s.push(n.close());let i=s;return await Promise.all(i),f.exit(0)}),this.on("manifest:change",function(t){if(f.env.IMBA_HMR)return l.update(t)}),this.on("manifest:error",function(t){if(f.env.IMBA_HMR)return l.errors=t,y.broadcast("errors",l.errors)}),!0}send(e){if(f.send instanceof Function)return f.send(e)}on(e,t){return e=="change"&&this.watch(),super.on(...arguments)}watch(){var e=this;if(this[z]!=!0?(this[z]=!0,!0):!1)return l.on("change:main",function(){return e.emit("change",l)})}reload(){if(!(this.isReloading!=!0?(this.isReloading=!0,!0):!1))return this;if(this.state.reloading=!0,!f.env.IMBA_SERVE){console.warn("not possible to gracefully reload servers not started via imba start");return}this.send("reload")}},U=class{constructor(e,t={}){this.url=e,[this.path,this.query]=e.split("?"),this.ext=M.default.extname(this.path),this.headers={"Content-Type":"text/plain","Access-Control-Allow-Origin":"*","cache-control":"public"},Object.assign(this.headers,N[this.ext.slice(1)]||{})}respond(e,t){let s=l.urls[this.url],i=this.headers,n=s?l.resolve(s):l.resolveAssetPath("public"+this.path);return n?(s&&s.ttl>0&&(i["cache-control"]="max-age="+s.ttl),b.default.access(n,b.default.constants.R_OK,function(o){if(o)return console.log("could not find path",n),t.writeHead(404,{}),t.end();try{let u=b.default.createReadStream(n);return t.writeHead(200,i),u.pipe(t)}catch(u){return t.writeHead(503,{}),t.end()}})):(console.log("found no path for",s,this.url),t.writeHead(404,{}),t.end())}createReadStream(){return b.default.createReadStream(this.path)}pipe(e){return this.createReadStream().pipe(e)}},G=class{static wrap(e){return new this(e)}constructor(e){var t=this;y.add(this),this.id=Math.random(),this.closed=!1,this.paused=!1,this.server=e,this.clients=new Set,this.stalledResponses=[],this.assetResponders={},f.env.IMBA_PATH&&(this.devtoolsPath=M.default.resolve(f.env.IMBA_PATH,"devtools.imba.web.js")),this.scheme=e instanceof E.default.Server?"http":"https";let s=this.server._events.request,i=globalThis[be];e.off("request",s),s[ye]=this,e.on("listening",function(){let n=t.server.address(),o=n.address;(o=="::"||o=="0.0.0.0")&&(o="localhost");let u=""+t.scheme+"://"+o+":"+n.port+"/";return I.info("listening on %bold",u)}),l.on("change",function(n,o){return t.broadcast("manifest",o.data[ve])}),this.handler=function(n,o){var u;let d=n instanceof k.Http2ServerRequest,m=n.url,Z="/__assets__/";if(t.paused||t.closed)return o.statusCode=302,o.setHeader("Location",n.url),d||o.setHeader("Connection","close"),t.closed?(d&&n.stream.session.close(),o.end()):t.stalledResponses.push(o);if(m=="/__hmr__.js"&&t.devtoolsPath){let p=b.default.createReadStream(t.devtoolsPath);return o.writeHead(200,N.js),p.pipe(o)}if(m=="/__hmr__"){let p={"Content-Type":"text/event-stream","Cache-Control":"no-cache"};return d||(p.Connection="keep-alive"),o.writeHead(200,p),t.clients.add(o),t.broadcast("init",l.serializeForBrowser(),[o]),n.on("close",function(){return t.clients.delete(o)}),!0}if(m.indexOf(Z)==0)return((u=t.assetResponders)[m]||(u[m]=new U(m,t))).respond(n,o);let S=n.headers,_;if(d?_=S[":scheme"]+"://"+S[":authority"]:_=(n.connection.encrypted?"https":"http")+"://"+S.host,i){let p=new i.Location(n.url,_);return i.Document.create({location:p},function(){return s(n,o)})}else return s(n,o)},e.on("request",this.handler),e.on("close",function(){return console.log("server is closing!!!")}),B.default.isWorker&&(W[L](),W.send("serve"))}broadcast(e,t={},s=this.clients){t=JSON.stringify(t);let i="data: "+t+`


`;for(let n of c(s))n.write("event: "+e+`
`),n.write(`id: imba
`),n.write(i);return this}pause(){return(this.paused!=!0?(this.paused=!0,!0):!1)&&this.broadcast("paused"),this}resume(){if(this.paused!=!1?(this.paused=!1,!0):!1)return this.broadcast("resumed"),this.flushStalledResponses()}flushStalledResponses(){for(let e=0,t=c(this.stalledResponses),s=t.length;e<s;e++)t[e].end();return this.stalledResponses=[]}close(){var e=this;return this.pause(),new Promise(function(t){return e.closed=!0,e.server.close(t),e.flushStalledResponses()})}};function J(r,...e){return G.wrap(r,...e)}var K=Symbol.for("#init"),v=Symbol.for("#asset"),x=class{static wrap(e){let t=new x(e);return new Proxy(t,t)}constructor(e){this.meta=e}get input(){return l.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input.asset}set(e,t,s){return!0}get(e,t){return this.meta.meta&&this.meta.meta[t]!=null?this.meta.meta[t]:t=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[t]}},q=class{constructor(e=null){this[K](e)}[K](e=null){this.url=e?e.url:void 0,this.meta=e?e.meta:void 0}adoptNode(e){var t;if((t=this.meta)==null?void 0:t.content){for(let s=this.meta.attributes,i=0,n=Object.keys(s),o=n.length,u,d;i<o;i++)u=n[i],d=s[u],e.setAttribute(u,d);e.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function Q(r){var e,t;if(r[v])return r[v];if(r.type=="svg")return r[v]||(r[v]=new q(r));if(r.input){let s=globalThis._MF_&&globalThis._MF_[r.input];return s&&(Object.assign(r,s),r.toString=function(){return this.absPath}),r[v]||(r[v]=x.wrap(r))}return r}var Y=a(require("http"));var X=Q({input:"entry:app/index.html"});var we=Y.default.createServer(function(r,e){let t=X.body;return(process.env.IMBA_HMR||globalThis.IMBA_HMR)&&(t="<script src='/__hmr__.js'></script>"+t),e.end(t)});J(we.listen(process.env.PORT||3e3));
//__FOOT__
//# sourceMappingURL=data:application/json;base64,
